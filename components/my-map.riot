<my-map>
    <div id="map">
        <button id="icon" class="button is-medium" onclick={recenter}>
            <span class="icon is-medium">
                <i class="fa-solid fa-location-dot"></i>
            </span>
        </button>
    </div>

    <script>
    let parisCoordinates = [48.856614, 2.3522219]
    export default {
        state : {
            map : null,
            markers : [],
            circle : null
        }, 

        onMounted(props) {
            this.state.map = L.map('map')
            this.state.map.setView(parisCoordinates, 5) //Coordonnées par défaut
            this.resetLayer()
        },

        onBeforeUpdate(props){
            this.getCoordinates(props.etablissements)
        }, 
        shouldUpdate(newProps, oldProps) {
            return  (newProps.gps.radius != oldProps.gps.radius) || (JSON.stringify(newProps.etablissements) !== JSON.stringify(oldProps.etablissements))
        },
        resetLayer() {
            this.state.map.eachLayer((layer) => {this.state.map.removeLayer(layer)})
            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                minZoom:1,
                maxZoom: 19,
                attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
            }).addTo(this.state.map);
        },
        getCoordinates(etablissements) {
            this.resetLayer()
            let markersCluster = new L.MarkerClusterGroup();
            this.state.markers = [];
            for (etablissement of etablissements) {
                let marker = L.marker(etablissement.coordinate);
                marker.on('mouseover', function (e) {
                    this.openPopup();
                });
                marker.on('mouseout', function (e) {
                    this.closePopup();
                });
                let t = etablissement.index
                marker.on('click',() => this.props.click(t))
                marker.bindPopup(`<p> ${etablissement.nom}</p>`)
                markersCluster.addLayer(marker);
                this.state.markers.push(marker); 
            }
            if(this.props.gps.radius) 
                this.addCircle(this.props.gps.radius,[...this.props.gps.coordinates].reverse(),this.props.gps.address)
            this.state.map.addLayer(markersCluster)
            this.recenter()
        },
        addCircle(rayon, coordinates, name) {
            this.state.circle = L.circle(coordinates, {
                radius : rayon * 1000,
                color: 'red'
            }).addTo(this.state.map)
            let gpsIcon = L.icon({
                iconUrl: 'css/images/marker-icon-gps.png',
                iconSize:     [25, 41], // size of the icon
                shadowSize:   [50, 64], // size of the shadow
                iconAnchor:   [12, 41], // point of the icon which will correspond to marker's location
                shadowAnchor: [12, 41],  // the same for the shadow
                popupAnchor:  [0, -40] // point from which the popup should open relative to the iconAnchor
            });
            let marker = L.marker(coordinates, {icon : gpsIcon}).bindPopup(name).addTo(this.state.map)
            marker.on('mouseover', function (e) {
                    this.openPopup();
            });
            marker.on('mouseout', function (e) {
                this.closePopup();
            });
        },
        recenter() {
            if(this.props.gps.coordinates.length == 2) {
                this.state.map.flyToBounds(this.state.circle.getBounds())
            }
            else if(this.state.markers.length > 0)
                this.state.map.flyToBounds(L.featureGroup(this.state.markers).getBounds().pad(0.1))
        }
    }
    
    </script>

    <style>

        #map {
            position: relative;
            height: 55vh; 
            z-index: 5;
        }

        #icon {
            position: absolute;
            left : 1rem;
            bottom : 1rem;
            z-index: 500;
            background-color : hsla(248, 100%, 100%, 0.49);
        }

    </style>

</my-map>